import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { supabase } from '../../lib/supabase';
import { useAuth } from '../../contexts/AuthContext';
import { useToast } from '../../components/ui/use-toast';
import { Card, CardHeader, CardTitle, CardContent } from '../../components/ui/card';
import { Button } from '../../components/ui/button';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '../../components/ui/table';
import {
  Plus,
  Search,
  Filter,
  ChevronDown,
  ChevronUp,
  ChevronLeft,
  ChevronRight,
  MoreHorizontal,
  Trash2,
  Edit,
  Eye,
  Download,
  Upload,
  Building,
  MapPin,
  Tag,
  DollarSign,
  Home,
  Calendar,
  User,
  Check,
  X,
  Star,
  StarOff,
  ArrowUpRight,
  ArrowDownRight,
  BarChart3,
  Activity,
  TrendingUp,
  TrendingDown,
  Settings,
} from 'lucide-react';
import FullScreenLoader from '../../components/common/FullScreenLoader';
import { getCurrencyDisplay } from '../../utils/currency';
import { PropertyType } from '../../utils/propertyTypes';
import { PropertyStatus, PROPERTY_STATUSES } from '../../utils/propertyStatuses';
import { getStatusBadgeColor as getStatusColor } from '../../utils/propertyStatuses';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '../../components/ui/dialog';
import { Input } from '../../components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../../components/ui/select';
import { Badge, badgeVariants } from '../../components/ui/badge';
import PropertyCard from '../../components/properties/PropertyCard';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '../../components/ui/tabs';
import { Textarea } from '../../components/ui/textarea';
import { Separator } from '../../components/ui/separator';
import { Avatar, AvatarFallback } from '../../components/ui/avatar';
import { Label } from '../../components/ui/label';

interface Property {
  id: string;
  name: string;
  type: PropertyType;
  price: number;
  address: string;
  city?: string;
  state?: string;
  zip_code?: string;
  bedrooms: number;
  bathrooms: number;
  square_footage: number;
  status: PropertyStatus;
  created_at: string;
  updated_at: string;
  owner: string;
  images: string[];
  market_cap?: number;
  token_nav?: number;
  current_price?: number;
  floor_size?: number;
  iro_sale_price?: number;
  iro_participants?: number;
  distance?: number;
  tags?: string[];
  bedroom_options?: string[];
  bathroom_options?: string[];
  size_options?: string[];
}

const ALL_STATUS_OPTIONS: { label: string; status: PropertyStatus | null }[] = [
  { label: 'All Properties', status: null },
  ...PROPERTY_STATUSES.CORE.map(s => ({ label: s, status: s })),
  ...PROPERTY_STATUSES.DEVELOPMENT.map(s => ({ label: s, status: s })),
  ...PROPERTY_STATUSES.TRANSACTIONAL.map(s => ({ label: s, status: s })),
  ...PROPERTY_STATUSES.RENTAL.map(s => ({ label: s, status: s })),
  ...PROPERTY_STATUSES.MARKET.map(s => ({ label: s, status: s })),
];

const DEFAULT_TABS = [
  { label: 'All Properties', status: null },
  { label: 'Available', status: 'Available' as PropertyStatus },
  { label: 'Under Offer', status: 'Under Offer' as PropertyStatus },
  { label: 'Sold', status: 'Sold' as PropertyStatus },
  { label: 'Rented', status: 'Rented' as PropertyStatus },
  { label: 'Off Market', status: 'Off Market' as PropertyStatus }
];

function getTabsFromStorage() {
  try {
    const raw = localStorage.getItem('propertyTabs');
    if (raw) return JSON.parse(raw);
  } catch {}
  return DEFAULT_TABS;
}

function saveTabsToStorage(tabs: any) {
  localStorage.setItem('propertyTabs', JSON.stringify(tabs));
}

const PAGE_SIZE = 10;

interface FilterPreset {
  name: string;
  filters: {
    type?: PropertyType[];
    min_price?: number;
    max_price?: number;
    status?: string[];
  };
}

const DEFAULT_FILTER_PRESETS: FilterPreset[] = [
  {
    name: 'Premium Properties',
    filters: {
      type: ['Apartment', 'Villa', 'Penthouse'],
      min_price: 1000000
    }
  },
  {
    name: 'Commercial Spaces',
    filters: {
      type: ['Office', 'Retail', 'Warehouse', 'Commercial Building']
    }
  },
  {
    name: 'Land Plots',
    filters: {
      type: ['Land']
    }
  }
];

interface Filters {
  type: PropertyType | 'All';
  minPrice: string;
  maxPrice: string;
  bedrooms: string;
  bathrooms: string;
  location: string;
  status: string;
  tags: string;
}

type SortConfig = {
  key: keyof Property | null;
  direction: 'asc' | 'desc';
};

const ALL_STATUSES = [
  ...PROPERTY_STATUSES.CORE,
  ...PROPERTY_STATUSES.DEVELOPMENT,
  ...PROPERTY_STATUSES.TRANSACTIONAL,
  ...PROPERTY_STATUSES.RENTAL,
  ...PROPERTY_STATUSES.MARKET,
] as const;

type BadgeVariant = 'default' | 'secondary' | 'destructive' | 'outline' | 'success' | 'warning' | 'info';

const Properties = () => {
  const { user } = useAuth();
  const { showToast } = useToast();
  const navigate = useNavigate();
  const [activeTab, setActiveTab] = useState(0);
  const [search, setSearch] = useState('');
  const [dateRange, setDateRange] = useState<{start: string|null, end: string|null}>({start: null, end: null});
  const [properties, setProperties] = useState<Property[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showFilters, setShowFilters] = useState(false);
  const [showAddModal, setShowAddModal] = useState(false);
  const [filters, setFilters] = useState<Filters>({
    type: 'All',
    minPrice: '',
    maxPrice: '',
    bedrooms: '',
    bathrooms: '',
    location: '',
    status: 'All',
    tags: '',
  });
  const [selected, setSelected] = useState<string[]>([]);
  const [page, setPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [sort, setSort] = useState<SortConfig>({ key: null, direction: 'asc' });
  const [bulkAction, setBulkAction] = useState<'status'|'type'|'delete'|null>(null);
  const [bulkValue, setBulkValue] = useState<string>('');
  const [showQuickView, setShowQuickView] = useState<Property | null>(null);
  const [filterPresets, setFilterPresets] = useState<FilterPreset[]>(DEFAULT_FILTER_PRESETS);
  const [activePreset, setActivePreset] = useState<string | null>(null);
  const [tabs, setTabs] = useState(() => getTabsFromStorage());
  const [showCustomizeTabs, setShowCustomizeTabs] = useState(false);
  const [viewMode, setViewMode] = useState<'table' | 'card'>('table');

  useEffect(() => {
    fetchProperties();
  }, [activeTab, page, sort, filters, dateRange]);

  useEffect(() => {
    saveTabsToStorage(tabs);
  }, [tabs]);

  const fetchProperties = async () => {
    try {
      setLoading(true);
      setError(null);
      
      let query = supabase
        .from('properties')
        .select('*', { count: 'exact' });

      // Apply status filter from tabs
      if (tabs[activeTab].status) {
        query = query.eq('listing_status', tabs[activeTab].status);
      }

      // Apply search
      if (search) {
        query = query.or(`title.ilike.%${search}%,address.ilike.%${search}%`);
      }

      // Apply filters
      if (filters.type !== 'All') query = query.eq('type', filters.type);
      if (filters.minPrice) query = query.gte('current_price', Number(filters.minPrice));
      if (filters.maxPrice) query = query.lte('current_price', Number(filters.maxPrice));
      if (filters.bedrooms) query = query.eq('bedrooms', Number(filters.bedrooms));
      if (filters.bathrooms) query = query.eq('bathrooms', Number(filters.bathrooms));
      if (filters.location) query = query.ilike('address', `%${filters.location}%`);
      if (filters.status !== 'All') query = query.eq('listing_status', filters.status);
      if (filters.tags) query = query.contains('tags', [filters.tags]);

      // Apply date range
      if (dateRange.start) {
        query = query.gte('created_at', dateRange.start);
      }
      if (dateRange.end) {
        query = query.lte('created_at', dateRange.end);
      }

      // Order by created_at DESC
      query = query.order('created_at', { ascending: false });

      // Apply pagination
      const from = (page - 1) * PAGE_SIZE;
      const to = from + PAGE_SIZE - 1;
      query = query.range(from, to);

      const { data, error, count } = await query;

      if (error) throw error;
      
      setProperties(data || []);
      setTotalPages(Math.ceil((count || 0) / PAGE_SIZE));
    } catch (error: any) {
      console.error('Error fetching properties:', error);
      setError(error.message);
      showToast('Error fetching properties', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleSearchInput = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearch(e.target.value);
    setPage(1);
  };

  const handleFilterChange = (key: string, value: string) => {
    setFilters(prev => ({ ...prev, [key]: value }));
    setPage(1);
  };

  const handleSort = (key: keyof Property) => {
    setSort(current => ({
      key,
      direction: current.key === key && current.direction === 'asc' ? 'desc' : 'asc'
    }));
  };

  const handleSelect = (id: string) => {
    setSelected(prev => 
      prev.includes(id) ? prev.filter(i => i !== id) : [...prev, id]
    );
  };

  const handleSelectAll = () => {
    setSelected(prev => 
      prev.length === properties.length ? [] : properties.map(p => p.id)
    );
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount);
  };

  const getStatusBadgeColor = (status: PropertyStatus) => {
    return getStatusColor(status);
  };

  const formatStatus = (status: string | undefined) => {
    if (!status) return 'Unknown';
    return status.replace('_', ' ');
  };

  const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>, which: 'start'|'end') => {
    setDateRange(prev => ({
      ...prev,
      [which]: e.target.value
    }));
    setPage(1);
  };

  const handleBulkUpdate = async () => {
    if (!bulkAction || !bulkValue || selected.length === 0) return;

    try {
      const updates = selected.map(id => ({
        id,
        [bulkAction]: bulkValue
      }));

      const { error } = await supabase
        .from('properties')
        .upsert(updates);

      if (error) throw error;

      showToast('Properties updated successfully', 'success');
      fetchProperties();
      setBulkAction(null);
      setBulkValue('');
      setSelected([]);
    } catch (error: any) {
      showToast(error.message, 'error');
    }
  };

  const handleBulkDelete = async () => {
    if (selected.length === 0) return;

    try {
      const { error } = await supabase
        .from('properties')
        .delete()
        .in('id', selected);

      if (error) throw error;

      showToast('Properties deleted successfully', 'success');
      fetchProperties();
      setSelected([]);
    } catch (error: any) {
      showToast(error.message, 'error');
    }
  };

  const handleExport = () => {
    const headers = ['ID', 'Name', 'Type', 'Price', 'Address', 'Status', 'Created At'];
    const data = properties.map(p => [
      p.id,
      p.name,
      p.type,
      p.price,
      p.address,
      p.status,
      new Date(p.created_at).toLocaleDateString()
    ]);

    const csvContent = [
      headers.join(','),
      ...data.map(row => row.join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `properties-${new Date().toISOString().split('T')[0]}.csv`;
    link.click();
  };

  const handleQuickView = (property: Property) => {
    setShowQuickView(property);
  };

  const savePreset = () => {
    const name = prompt('Enter preset name:');
    if (!name) return;

    const newPreset: FilterPreset = {
      name,
      filters: {
        type: filters.type !== 'All' ? [filters.type] : undefined,
        min_price: filters.minPrice ? Number(filters.minPrice) : undefined,
        max_price: filters.maxPrice ? Number(filters.maxPrice) : undefined,
        status: filters.status !== 'All' ? [filters.status] : undefined,
      }
    };

    setFilterPresets(prev => [...prev, newPreset]);
    setActivePreset(name);
  };

  const loadPreset = (preset: FilterPreset) => {
    setFilters({
      type: preset.filters.type?.[0] || 'All',
      minPrice: preset.filters.min_price?.toString() || '',
      maxPrice: preset.filters.max_price?.toString() || '',
      bedrooms: '',
      bathrooms: '',
      location: '',
      status: preset.filters.status?.[0] || 'All',
      tags: '',
    });
    setActivePreset(preset.name);
  };

  const deletePreset = (name: string) => {
    setFilterPresets(prev => prev.filter(p => p.name !== name));
    if (activePreset === name) {
      setActivePreset(null);
    }
  };

  const handleTabToggle = (status: PropertyStatus | null) => {
    if (tabs.some(tab => tab.status === status)) {
      setTabs(tabs.filter(tab => tab.status !== status));
    } else {
      const found = ALL_STATUS_OPTIONS.find(opt => opt.status === status);
      if (found) setTabs([...tabs, found]);
    }
  };

  const moveTab = (idx: number, dir: -1 | 1) => {
    if (idx === 0 && dir === -1) return;
    if (idx === tabs.length - 1 && dir === 1) return;
    const newTabs = [...tabs];
    const [removed] = newTabs.splice(idx, 1);
    newTabs.splice(idx + dir, 0, removed);
    setTabs(newTabs);
  };

  const sortedProperties = [...properties].sort((a, b) => {
    if (!sort.key) return 0;

    const aValue = a[sort.key];
    const bValue = b[sort.key];

    if (aValue === null) return 1;
    if (bValue === null) return -1;

    if (typeof aValue === 'string' && typeof bValue === 'string') {
      return sort.direction === 'asc' 
        ? aValue.localeCompare(bValue)
        : bValue.localeCompare(aValue);
    }

    if (typeof aValue === 'number' && typeof bValue === 'number') {
      return sort.direction === 'asc' 
        ? aValue - bValue
        : bValue - aValue;
    }

    return 0;
  });

  const handleSaveTabs = () => {
    saveTabsToStorage(tabs);
    setShowCustomizeTabs(false);
  };

  const getBadgeVariant = (status: PropertyStatus): BadgeVariant => {
    const color = getStatusBadgeColor(status);
    if (color.includes('green')) return 'success';
    if (color.includes('red')) return 'destructive';
    if (color.includes('yellow')) return 'warning';
    if (color.includes('blue')) return 'info';
    if (color.includes('purple')) return 'secondary';
    return 'default';
  };

  // Helper to format bedroom/bathroom/area options for card view
  const formatOptions = (arr, fallback) => {
    if (!arr || arr.length === 0) return fallback ?? 'N/A';
    if (arr.length === 1) return arr[0];
    if (arr.length === 2) return `${arr[0]} - ${arr[1]}`;
    return arr.join(', ');
  };

  if (loading) return <FullScreenLoader />;

    return (
    <div className="min-h-screen bg-background dark:bg-[#141414] container mx-auto px-4 md:px-6 py-8 space-y-6">
      {/* Header */}
      <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-6">
        <h1 className="text-2xl font-bold text-foreground dark:text-white">Properties</h1>
        <div className="flex flex-wrap gap-2">
          <Button
            variant={viewMode === 'table' ? 'default' : 'outline'}
            onClick={() => setViewMode('table')}
          >
            Table View
          </Button>
          <Button
            variant={viewMode === 'card' ? 'default' : 'outline'}
            onClick={() => setViewMode('card')}
          >
            Card View
          </Button>
          <Button
            variant="outline"
            onClick={() => setShowFilters(!showFilters)}
          >
            <Filter className="h-4 w-4 mr-2" />
            Filters
          </Button>
          <Button
            variant="outline"
            onClick={handleExport}
          >
            <Download className="h-4 w-4 mr-2" />
            Export
          </Button>
          <Button onClick={() => navigate('/properties/new')}>
            <Plus className="h-4 w-4 mr-2" />
            Add Property
          </Button>
        </div>
      </div>

      {/* Tabs */}
      <div className="flex items-center gap-2 mb-6 flex-wrap">
        {tabs.map((tab, idx) => (
          <button
            key={tab.label}
            className={`px-4 py-2 border-b-2 ${activeTab === idx ? 'bg-card dark:bg-[#23262F] text-primary border-primary' : 'text-muted-foreground dark:text-gray-400 border-transparent'} focus:outline-none`}
            onClick={() => setActiveTab(idx)}
          >
            {tab.label}
          </button>
        ))}
        <Dialog open={showCustomizeTabs} onOpenChange={setShowCustomizeTabs}>
          <DialogTrigger asChild>
            <Button variant="outline">
              <Settings className="h-4 w-4 mr-2" />
              Customize Tabs
            </Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Customize Status Tabs</DialogTitle>
              <DialogDescription>
                Choose which status tabs to show and in what order.
              </DialogDescription>
            </DialogHeader>
            <div className="py-4">
              <div className="text-sm text-gray-400 mb-2">
                Select which statuses you want as tabs. Drag to reorder. Your setup is saved locally.
              </div>
              <div className="flex flex-col gap-2 max-h-72 overflow-y-auto">
                {ALL_STATUSES.map((status) => (
                  <div key={status} className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={tabs.includes(status)}
                      onChange={() => handleTabToggle(status)}
                      className="rounded border-gray-300"
                    />
                    <Badge variant={getBadgeVariant(status)} className="ring-1 ring-primary/30 hover:ring-primary/60 transition-shadow">
                      {status}
                    </Badge>
                  </div>
                ))}
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setShowCustomizeTabs(false)}>
                Cancel
              </Button>
              <Button onClick={handleSaveTabs}>
                Save Changes
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>

      {/* Search and Filters */}
      <div className="flex flex-col md:flex-row gap-4 items-center mb-6">
        <div className="relative flex-1 w-full">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-foreground dark:text-white" />
          <input
            type="text"
            placeholder="Search properties..."
            className="w-full pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-background-light dark:bg-[#23262F] text-foreground dark:text-white"
            value={search}
            onChange={handleSearchInput}
          />
        </div>
        <div className="flex gap-2 w-full md:w-auto">
          <input
            type="date"
            className="bg-background-light dark:bg-[#23262F] border border-border dark:border-[#393C49] text-foreground dark:text-white placeholder:text-muted-foreground dark:placeholder:text-gray-400"
            value={dateRange.start || ''}
            onChange={(e) => handleDateChange(e, 'start')}
          />
          <input
            type="date"
            className="bg-background-light dark:bg-[#23262F] border border-border dark:border-[#393C49] text-foreground dark:text-white placeholder:text-muted-foreground dark:placeholder:text-gray-400"
            value={dateRange.end || ''}
            onChange={(e) => handleDateChange(e, 'end')}
          />
        </div>
      </div>

      {/* Filter Presets */}
      <div className="flex gap-2 overflow-x-auto pb-2 mb-6">
        {filterPresets.map(preset => (
          <div
            key={preset.name}
            className={`flex items-center gap-2 px-3 py-1.5 rounded-full text-sm cursor-pointer ${activePreset === preset.name ? 'bg-accent text-primary' : 'bg-background-light dark:bg-[#23262F] text-muted-foreground dark:text-gray-400 hover:bg-accent'}`}
          >
            <button
              onClick={() => loadPreset(preset)}
              className="flex items-center gap-1"
            >
              <Tag className="h-3 w-3" />
              {preset.name}
            </button>
            <button
              onClick={() => deletePreset(preset.name)}
              className="text-gray-400 hover:text-primary"
            >
              <X className="h-3 w-3" />
            </button>
          </div>
        ))}
        <button
          onClick={savePreset}
          className="flex items-center gap-1 px-3 py-1.5 rounded-full text-sm bg-background-light dark:bg-[#23262F] text-muted-foreground dark:text-gray-400 hover:bg-accent"
        >
          <Plus className="h-3 w-3" />
          Save Preset
        </button>
      </div>

      {/* Filters Panel */}
      {showFilters && (
        <Card className="mb-6 border border-border dark:border-[#393C49] shadow-lg bg-card dark:bg-[#23262F]">
          <CardContent className="p-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label className="block text-sm font-medium text-foreground dark:text-white mb-1">Type</label>
                <select
                  className="w-full border rounded-lg px-3 py-2 bg-background-light dark:bg-[#23262F] border border-border dark:border-[#393C49] text-foreground dark:text-white"
                  value={filters.type}
                  onChange={(e) => handleFilterChange('type', e.target.value)}
                >
                  <option value="All">All Types</option>
                  <option value="Apartment">Apartment</option>
                  <option value="Villa">Villa</option>
                  <option value="Penthouse">Penthouse</option>
                  <option value="Office">Office</option>
                  <option value="Retail">Retail</option>
                  <option value="Warehouse">Warehouse</option>
                  <option value="Commercial Building">Commercial Building</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-foreground dark:text-white mb-1">Price Range</label>
                <div className="flex gap-2">
                  <input
                    type="number"
                    placeholder="Min"
                    className="w-full border rounded-lg px-3 py-2 bg-background-light dark:bg-[#23262F] border border-border dark:border-[#393C49] text-foreground dark:text-white"
                    value={filters.minPrice}
                    onChange={(e) => handleFilterChange('minPrice', e.target.value)}
                  />
                  <input
                    type="number"
                    placeholder="Max"
                    className="w-full border rounded-lg px-3 py-2 bg-background-light dark:bg-[#23262F] border border-border dark:border-[#393C49] text-foreground dark:text-white"
                    value={filters.maxPrice}
                    onChange={(e) => handleFilterChange('maxPrice', e.target.value)}
                  />
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-foreground dark:text-white mb-1">Location</label>
                <input
                  type="text"
                  placeholder="Enter location..."
                  className="w-full border rounded-lg px-3 py-2 bg-background-light dark:bg-[#23262F] border border-border dark:border-[#393C49] text-foreground dark:text-white placeholder:text-muted-foreground dark:placeholder:text-gray-400"
                  value={filters.location}
                  onChange={(e) => handleFilterChange('location', e.target.value)}
                />
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Bulk Actions */}
      {selected.length > 0 && (
        <div className="flex gap-2 items-center bg-accent text-white p-4 rounded-lg mb-6">
          <span className="text-sm text-gray-400">{selected.length} selected</span>
          <select
            className="border rounded-lg px-3 py-2 bg-background-light dark:bg-[#23262F] border border-border dark:border-[#393C49] text-foreground dark:text-white"
            value={bulkAction || ''}
            onChange={(e) => setBulkAction(e.target.value as any)}
          >
            <option value="">Bulk Actions</option>
            <option value="status">Update Status</option>
            <option value="type">Update Type</option>
            <option value="delete">Delete</option>
          </select>
          {bulkAction && bulkAction !== 'delete' && (
            <select
              className="border rounded-lg px-3 py-2 bg-background-light dark:bg-[#23262F] border border-border dark:border-[#393C49] text-foreground dark:text-white"
              value={bulkValue}
              onChange={(e) => setBulkValue(e.target.value)}
            >
              <option value="">Select Value</option>
              {bulkAction === 'status' && (
                <>
                  <optgroup label="Core Statuses">
                    {PROPERTY_STATUSES.CORE.map(status => (
                      <option key={status} value={status}>{status}</option>
                    ))}
                  </optgroup>
                  <optgroup label="Development Statuses">
                    {PROPERTY_STATUSES.DEVELOPMENT.map(status => (
                      <option key={status} value={status}>{status}</option>
                    ))}
                  </optgroup>
                  <optgroup label="Transactional Statuses">
                    {PROPERTY_STATUSES.TRANSACTIONAL.map(status => (
                      <option key={status} value={status}>{status}</option>
                    ))}
                  </optgroup>
                  <optgroup label="Rental Statuses">
                    {PROPERTY_STATUSES.RENTAL.map(status => (
                      <option key={status} value={status}>{status}</option>
                    ))}
                  </optgroup>
                  <optgroup label="Market Statuses">
                    {PROPERTY_STATUSES.MARKET.map(status => (
                      <option key={status} value={status}>{status}</option>
                    ))}
                  </optgroup>
                </>
              )}
              {bulkAction === 'type' && (
                <>
                  <option value="Apartment">Apartment</option>
                  <option value="Villa">Villa</option>
                  <option value="Penthouse">Penthouse</option>
                  <option value="Office">Office</option>
                  <option value="Retail">Retail</option>
                  <option value="Warehouse">Warehouse</option>
                  <option value="Commercial Building">Commercial Building</option>
                </>
              )}
            </select>
          )}
          <Button
            variant="outline"
            onClick={bulkAction === 'delete' ? handleBulkDelete : handleBulkUpdate}
            className="ring-1 ring-primary/30 hover:ring-primary/60 transition-shadow"
          >
            Apply
          </Button>
          <Button
            variant="ghost"
            onClick={() => {
              setSelected([]);
              setBulkAction(null);
              setBulkValue('');
            }}
            className="ring-1 ring-primary/30 hover:ring-primary/60 transition-shadow"
          >
            Cancel
          </Button>
        </div>
      )}

      {/* Properties Table */}
      {viewMode === 'table' ? (
        <Card className="border border-border dark:border-[#393C49] shadow-lg mb-8 bg-card dark:bg-[#23262F]">
          <CardContent className="p-0">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead className="w-12">
                    <input
                      type="checkbox"
                      checked={selected.length === properties.length}
                      onChange={handleSelectAll}
                      className="rounded border-gray-300"
                    />
                  </TableHead>
                  <TableHead 
                    className="cursor-pointer hover:bg-accent text-foreground dark:text-white"
                    onClick={() => handleSort('name')}
                  >
                    <div className="flex items-center gap-1">
                      Name
                      {sort.key === 'name' && (
                        sort.direction === 'asc' ? 
                          <ChevronUp className="h-4 w-4" /> : 
                          <ChevronDown className="h-4 w-4" />
                      )}
                    </div>
                  </TableHead>
                  <TableHead 
                    className="cursor-pointer hover:bg-accent text-foreground dark:text-white"
                    onClick={() => handleSort('type')}
                  >
                    <div className="flex items-center gap-1">
                      Type
                      {sort.key === 'type' && (
                        sort.direction === 'asc' ? 
                          <ChevronUp className="h-4 w-4" /> : 
                          <ChevronDown className="h-4 w-4" />
                      )}
                    </div>
                  </TableHead>
                  <TableHead 
                    className="cursor-pointer hover:bg-accent text-foreground dark:text-white"
                    onClick={() => handleSort('current_price')}
                  >
                    <div className="flex items-center gap-1">
                      Price
                      {sort.key === 'current_price' && (
                        sort.direction === 'asc' ? 
                          <ChevronUp className="h-4 w-4" /> : 
                          <ChevronDown className="h-4 w-4" />
                      )}
                    </div>
                  </TableHead>
                  <TableHead 
                    className="cursor-pointer hover:bg-accent text-foreground dark:text-white"
                    onClick={() => handleSort('address')}
                  >
                    <div className="flex items-center gap-1">
                      Location
                      {sort.key === 'address' && (
                        sort.direction === 'asc' ? 
                          <ChevronUp className="h-4 w-4" /> : 
                          <ChevronDown className="h-4 w-4" />
                      )}
                    </div>
                  </TableHead>
                  <TableHead 
                    className="cursor-pointer hover:bg-accent text-foreground dark:text-white"
                    onClick={() => handleSort('status')}
                  >
                    <div className="flex items-center gap-1">
                      Status
                      {sort.key === 'status' && (
                        sort.direction === 'asc' ? 
                          <ChevronUp className="h-4 w-4" /> : 
                          <ChevronDown className="h-4 w-4" />
                      )}
                    </div>
                  </TableHead>
                  <TableHead 
                    className="cursor-pointer hover:bg-accent text-foreground dark:text-white"
                    onClick={() => handleSort('created_at')}
                  >
                    <div className="flex items-center gap-1">
                      Created
                      {sort.key === 'created_at' && (
                        sort.direction === 'asc' ? 
                          <ChevronUp className="h-4 w-4" /> : 
                          <ChevronDown className="h-4 w-4" />
                      )}
                    </div>
                  </TableHead>
                  <TableHead className="w-12"></TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {sortedProperties.map((property) => (
                  <TableRow key={property.id} className="even:bg-background/80 odd:bg-background/60 hover:bg-accent transition-colors">
                    <TableCell>
                      <input
                        type="checkbox"
                        checked={selected.includes(property.id)}
                        onChange={() => handleSelect(property.id)}
                        className="rounded border-gray-300"
                      />
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <Building className="h-4 w-4 text-foreground dark:text-white" />
                        {property.name}
                      </div>
                    </TableCell>
                    <TableCell>
                      <span className="capitalize">{property.type}</span>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <DollarSign className="h-4 w-4 text-foreground dark:text-white" />
                        <div className="space-y-1">
                          <div className="font-semibold">
                            {getCurrencyDisplay(property.current_price ?? 0).primary}
                          </div>
                          <div className="text-xs text-muted-foreground dark:text-gray-400 space-y-0.5">
                            {getCurrencyDisplay(property.current_price ?? 0).secondary.map((display, index) => (
                              <div key={index}>{display}</div>
                            ))}
                          </div>
                        </div>
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <MapPin className="h-4 w-4 text-foreground dark:text-white" />
                        {property.address}
                        {property.city && `, ${property.city}`}
                      </div>
                    </TableCell>
                    <TableCell>
                      <Badge variant={getBadgeVariant(property.status || 'Available')} className="ring-1 ring-primary/30 hover:ring-primary/60 transition-shadow">
                        {property.status || 'Available'}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      {new Date(property.created_at).toLocaleDateString()}
                    </TableCell>
                    <TableCell>
                      <div className="flex gap-2">
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => handleQuickView(property)}
                          className="ring-1 ring-primary/30 hover:ring-primary/60 transition-shadow"
                        >
                          <Eye className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => navigate(`/properties/${property.id}/edit`)}
                          className="ring-1 ring-primary/30 hover:ring-primary/60 transition-shadow"
                        >
                          <Edit className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => navigate(`/properties/${property.id}`)}
                          className="ring-1 ring-primary/30 hover:ring-primary/60 transition-shadow"
                        >
                          <ArrowUpRight className="h-4 w-4" />
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
        </Card>
      ) : (
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8 mt-6">
          {sortedProperties.map((property) => (
            <PropertyCard
              key={property.id}
              id={property.id}
              refNo={property.id}
              title={property.name}
              price={property.current_price ?? 0}
              type={property.type}
              location={property.address}
              bedrooms={formatOptions(property.bedroom_options, property.bedrooms)}
              bathrooms={formatOptions(property.bathroom_options, property.bathrooms)}
              area={formatOptions(property.size_options, property.square_footage)}
              status={property.status}
              listingDate={new Date(property.created_at).toLocaleDateString()}
              owner={property.owner}
              image={property.images?.[0]}
              onClick={() => navigate(`/properties/${property.id}`)}
            />
          ))}
        </div>
      )}

      {/* Pagination */}
      <div className="flex justify-between items-center">
        <div className="text-sm text-gray-400">
          Showing {properties.length} of {totalPages * PAGE_SIZE} properties
        </div>
        <div className="flex gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => setPage(p => Math.max(1, p - 1))}
            disabled={page === 1}
          >
            <ChevronLeft className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => setPage(p => Math.min(totalPages, p + 1))}
            disabled={page === totalPages}
          >
            <ChevronRight className="h-4 w-4" />
          </Button>
        </div>
      </div>

      {/* Quick View Modal */}
      {showQuickView && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <Card className="w-full max-w-2xl">
            <CardHeader>
              <div className="flex justify-between items-center">
                <CardTitle>{showQuickView.name}</CardTitle>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => setShowQuickView(null)}
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <div className="text-sm text-foreground dark:text-white">Type</div>
                    <div className="flex items-center gap-2 mt-1">
                      <Building className="h-4 w-4 text-foreground dark:text-white" />
                      {showQuickView.type}
                    </div>
                  </div>
                  <div>
                    <div className="text-sm text-foreground dark:text-white">Price</div>
                    <div className="flex items-center gap-2 mt-1">
                      <DollarSign className="h-4 w-4 text-foreground dark:text-white" />
                      <div className="space-y-1">
                        <div className="font-semibold">
                          {getCurrencyDisplay(showQuickView.current_price ?? 0).primary}
                        </div>
                        <div className="text-xs text-muted-foreground dark:text-gray-400 space-y-0.5">
                          {getCurrencyDisplay(showQuickView.current_price ?? 0).secondary.map((display, index) => (
                            <div key={index}>{display}</div>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                  <div>
                    <div className="text-sm text-foreground dark:text-white">Location</div>
                    <div className="flex items-center gap-2 mt-1">
                      <MapPin className="h-4 w-4 text-foreground dark:text-white" />
                      {showQuickView.address}
                      {showQuickView.city && `, ${showQuickView.city}`}
                    </div>
                  </div>
                  <div>
                    <div className="text-sm text-foreground dark:text-white">Status</div>
                    <div className="mt-1">
                      <Badge variant={getBadgeVariant(showQuickView.status || 'Available')} className="ring-1 ring-primary/30 hover:ring-primary/60 transition-shadow">
                        {showQuickView.status || 'Available'}
                      </Badge>
                    </div>
                  </div>
                </div>
                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    onClick={() => {
                      setShowQuickView(null);
                      navigate(`/properties/${showQuickView.id}/edit`);
                    }}
                    className="ring-1 ring-primary/30 hover:ring-primary/60 transition-shadow"
                  >
                    Edit
                  </Button>
                  <Button
                    variant="outline"
                    onClick={() => {
                      setShowQuickView(null);
                      navigate(`/properties/${showQuickView.id}`);
                    }}
                    className="ring-1 ring-primary/30 hover:ring-primary/60 transition-shadow"
                  >
                    View
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
};

export default Properties;